#corpus语料库 倒序索引inverted index
class SearchEngineBase(object):# 负责读取文本内容，将文本路径作为ID，连同内容一起送到process_corpus.
    def __init__(self):
        pass

    def add_corpus(self, file_path):
        with open(file_path, 'r') as fin:
            text = fin.read()
        self.process_corpus(file_path, text)

    def process_corpus(self, id, text):         # 索引器
        raise Exception('process_corpus not implemented.')

    def search(self, query):                    # 检索器
        raise Exception('search not implemented.')

class SimpleEngine(SearchEngineBase):           #继承SearchEngineBase的子类，继承并实现了process_corpus.
    def __init__(self):
        super(SimpleEngine, self).__init__()
        self.__id_to_texts = {}                 #初始化时，定义了一个私有字典变量{ file_path : text }

    def process_corpus(self, id, text):
        self.__id_to_texts[id] = text

    def search(self, query):
        results = []
        for id, text in self.__id_to_texts.items():  #取出字典
            if query in text:
                results.append(id)
        return results

def main(search_engine):                        #用户接口
    for file_path in ['1.txt', '2.txt', '3.txt', '4.txt', '5.txt']:
        search_engine.add_corpus(file_path)

    while True:
        query = input()
        results = search_engine.search(query)
        print('found {} result(s):'.format(len(results)))
        for result in results:
            print(result)

search_engine = SimpleEngine()  #创建一个对象
main(search_engine)
